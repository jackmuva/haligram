{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":["file:///Users/jackmu/Documents/haligram/src/auth.ts"],"sourcesContent":["import NextAuth from \"next-auth\"\nimport GitHub from \"next-auth/providers/github\"\nimport { SignJWT } from \"jose\";\nimport { getSession } from \"next-auth/react\";\n\nexport const { handlers, auth, signIn, signOut } = NextAuth({\n\tproviders: [GitHub],\n})\n\nexport async function userWithToken() {\n\tconst user = await getSession();\n\tconst PRIVATE_KEY = await importPrivateKey(process.env.PARAGON_SIGNING_KEY!);\n\n\tif (user && user.user) {\n\t\ttry {\n\t\t\tconst paragonUserToken = await new SignJWT({\n\t\t\t\tsub: user.user.id,\n\t\t\t\taud: `useparagon.com/${process.env.NEXT_PUBLIC_PARAGON_PROJECT_ID}`,\n\t\t\t})\n\t\t\t\t.setProtectedHeader({ alg: \"RS256\" })\n\t\t\t\t.setIssuedAt()\n\t\t\t\t.setExpirationTime(\"24h\")\n\t\t\t\t.sign(PRIVATE_KEY);\n\n\t\t\treturn {\n\t\t\t\tuser,\n\t\t\t\tparagonUserToken,\n\t\t\t};\n\t\t} catch (err) {\n\t\t\tconsole.error(\"Paragon signing error\", err);\n\t\t}\n\t}\n\treturn { user: null };\n}\n\nexport async function createParagonToken(userId: string) {\n\tconst PRIVATE_KEY = await importPrivateKey(process.env.PARAGON_SIGNING_KEY!);\n\ttry {\n\t\tconst paragonUserToken = await new SignJWT({ sub: userId, })\n\t\t\t.setProtectedHeader({ alg: \"RS256\" })\n\t\t\t.setIssuedAt()\n\t\t\t.setExpirationTime(\"24h\")\n\t\t\t.sign(PRIVATE_KEY);\n\n\t\treturn paragonUserToken;\n\t} catch (err) {\n\t\tconsole.error(\"Paragon signing error\", err);\n\t}\n}\n\n\n/*\n  Import a PEM encoded RSA private key, to use for RSA-PSS signing.\n  Takes a string containing the PEM encoded key, and returns a Promise\n  that will resolve to a CryptoKey representing the private key.\n  */\nexport async function importPrivateKey(pem: string) {\n\t// Replace encoded newlines with actual newlines\n\tpem = pem.replace(/\\\\n/g, \"\\n\");\n\n\t// Normalize newlines to '\\n'\n\tpem = pem.replace(/\\r\\n/g, \"\\n\").replace(/\\r/g, \"\\n\");\n\n\t// Remove unnecessary whitespace and ensure proper PEM format\n\tpem = pem.trim();\n\n\tconst pemHeader = \"-----BEGIN PRIVATE KEY-----\";\n\tconst pemFooter = \"-----END PRIVATE KEY-----\";\n\n\tif (!pem.startsWith(pemHeader) || !pem.endsWith(pemFooter)) {\n\t\tthrow new Error(\"PEM format is incorrect.\");\n\t}\n\n\t// Fetch the part of the PEM string between header and footer\n\tconst pemContents = pem\n\t\t.substring(pemHeader.length, pem.length - pemFooter.length)\n\t\t.replace(/[\\s\\n]+/g, \"\"); // Remove all whitespace and newline characters\n\n\t// Base64 decode the string to get the binary data\n\tconst binaryDerString = Buffer.from(pemContents, \"base64\");\n\n\ttry {\n\t\treturn await globalThis.crypto.subtle.importKey(\n\t\t\t\"pkcs8\",\n\t\t\tbinaryDerString,\n\t\t\t{\n\t\t\t\tname: \"RSASSA-PKCS1-v1_5\",\n\t\t\t\thash: \"SHA-256\",\n\t\t\t},\n\t\t\ttrue,\n\t\t\t[\"sign\"]\n\t\t);\n\t} catch (err) {\n\t\tconsole.warn(\n\t\t\t\"Could not import signing key, it may be in an invalid format.\"\n\t\t);\n\t\tthrow err;\n\t}\n}\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAAA;AACA;AAAA;AACA;AACA;;;;;AAEO,MAAM,EAAE,QAAQ,EAAE,IAAI,EAAE,MAAM,EAAE,OAAO,EAAE,GAAG,CAAA,GAAA,uJAAA,CAAA,UAAQ,AAAD,EAAE;IAC3D,WAAW;QAAC,uJAAA,CAAA,UAAM;KAAC;AACpB;AAEO,eAAe;IACrB,MAAM,OAAO,MAAM,CAAA,GAAA,uIAAA,CAAA,aAAU,AAAD;IAC5B,MAAM,cAAc,MAAM,iBAAiB,QAAQ,GAAG,CAAC,mBAAmB;IAE1E,IAAI,QAAQ,KAAK,IAAI,EAAE;QACtB,IAAI;YACH,MAAM,mBAAmB,MAAM,IAAI,uJAAA,CAAA,UAAO,CAAC;gBAC1C,KAAK,KAAK,IAAI,CAAC,EAAE;gBACjB,KAAK,CAAC,eAAe,EAAE,QAAQ,GAAG,CAAC,8BAA8B,EAAE;YACpE,GACE,kBAAkB,CAAC;gBAAE,KAAK;YAAQ,GAClC,WAAW,GACX,iBAAiB,CAAC,OAClB,IAAI,CAAC;YAEP,OAAO;gBACN;gBACA;YACD;QACD,EAAE,OAAO,KAAK;YACb,QAAQ,KAAK,CAAC,yBAAyB;QACxC;IACD;IACA,OAAO;QAAE,MAAM;IAAK;AACrB;AAEO,eAAe,mBAAmB,MAAc;IACtD,MAAM,cAAc,MAAM,iBAAiB,QAAQ,GAAG,CAAC,mBAAmB;IAC1E,IAAI;QACH,MAAM,mBAAmB,MAAM,IAAI,uJAAA,CAAA,UAAO,CAAC;YAAE,KAAK;QAAQ,GACxD,kBAAkB,CAAC;YAAE,KAAK;QAAQ,GAClC,WAAW,GACX,iBAAiB,CAAC,OAClB,IAAI,CAAC;QAEP,OAAO;IACR,EAAE,OAAO,KAAK;QACb,QAAQ,KAAK,CAAC,yBAAyB;IACxC;AACD;AAQO,eAAe,iBAAiB,GAAW;IACjD,gDAAgD;IAChD,MAAM,IAAI,OAAO,CAAC,QAAQ;IAE1B,6BAA6B;IAC7B,MAAM,IAAI,OAAO,CAAC,SAAS,MAAM,OAAO,CAAC,OAAO;IAEhD,6DAA6D;IAC7D,MAAM,IAAI,IAAI;IAEd,MAAM,YAAY;IAClB,MAAM,YAAY;IAElB,IAAI,CAAC,IAAI,UAAU,CAAC,cAAc,CAAC,IAAI,QAAQ,CAAC,YAAY;QAC3D,MAAM,IAAI,MAAM;IACjB;IAEA,6DAA6D;IAC7D,MAAM,cAAc,IAClB,SAAS,CAAC,UAAU,MAAM,EAAE,IAAI,MAAM,GAAG,UAAU,MAAM,EACzD,OAAO,CAAC,YAAY,KAAK,+CAA+C;IAE1E,kDAAkD;IAClD,MAAM,kBAAkB,OAAO,IAAI,CAAC,aAAa;IAEjD,IAAI;QACH,OAAO,MAAM,WAAW,MAAM,CAAC,MAAM,CAAC,SAAS,CAC9C,SACA,iBACA;YACC,MAAM;YACN,MAAM;QACP,GACA,MACA;YAAC;SAAO;IAEV,EAAE,OAAO,KAAK;QACb,QAAQ,IAAI,CACX;QAED,MAAM;IACP;AACD","debugId":null}},
    {"offset": {"line": 170, "column": 0}, "map": {"version":3,"sources":["file:///Users/jackmu/Documents/haligram/src/app/%28auth%29/api/oauth/reddit/route.ts"],"sourcesContent":["import { auth } from \"@/auth\";\nimport { NextResponse } from \"next/server\";\n\nexport async function GET() {\n\tconst session = await auth();\n\tif (!session || !session.user) {\n\t\treturn Response.json({\n\t\t\tstatus: 400,\n\t\t\tmessage: \"user has not authenticated\"\n\t\t});\n\t}\n\n\tconst urlParams = new URLSearchParams({\n\t\tclient_id: process.env.REDDIT_CLIENT_ID!,\n\t\tresponse_type: 'code',\n\t\tstate: session.user.email ?? \"no-user\",\n\t\tredirect_uri: `${process.env.APPLICATION_URL}/api/oauth/reddit/callback`,\n\t\tduration: 'permanent',\n\t\tscope: 'submit vote read',\n\t});\n\treturn NextResponse.redirect(`https://www.reddit.com/api/v1/authorize?${urlParams.toString()}`,\n\t\t{ status: 307 });\n}\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,eAAe;IACrB,MAAM,UAAU,MAAM,CAAA,GAAA,6GAAA,CAAA,OAAI,AAAD;IACzB,IAAI,CAAC,WAAW,CAAC,QAAQ,IAAI,EAAE;QAC9B,OAAO,SAAS,IAAI,CAAC;YACpB,QAAQ;YACR,SAAS;QACV;IACD;IAEA,MAAM,YAAY,IAAI,gBAAgB;QACrC,WAAW,QAAQ,GAAG,CAAC,gBAAgB;QACvC,eAAe;QACf,OAAO,QAAQ,IAAI,CAAC,KAAK,IAAI;QAC7B,cAAc,GAAG,QAAQ,GAAG,CAAC,eAAe,CAAC,0BAA0B,CAAC;QACxE,UAAU;QACV,OAAO;IACR;IACA,OAAO,gIAAA,CAAA,eAAY,CAAC,QAAQ,CAAC,CAAC,wCAAwC,EAAE,UAAU,QAAQ,IAAI,EAC7F;QAAE,QAAQ;IAAI;AAChB","debugId":null}}]
}